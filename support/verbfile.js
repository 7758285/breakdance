'use strict';

var through = require('through2');
var format = require('gulp-format-md');
var PluginError = require('plugin-error');
var utils = require('repo-utils');
var pkg = require('../package');

module.exports = function(verb, cb) {
  verb.use(require('verb-generate-readme'));

  verb.task('default', function() {
    verb.doc('apidocs.md', {content: '{%= apidocs("../index.js") %}'});
    return verb.toStream('docs')
      .pipe(filter({stem: 'apidocs'}))
      .pipe(verb.renderFile())
      .pipe(format())
      .pipe(fixLinks())
      .pipe(prepend())
      .pipe(verb.dest('src/templates/includes'));
  });

  verb.build('default', cb);
};

function filter(options) {
  return through.obj(function(file, enc, next) {
    try {
      for (var key in options) {
        if (options.hasOwnProperty(key)) {
          if (file[key] !== options[key]) {
            next();
            return;
          }
        }
      }
    } catch (err) {
      this.emit('error', new PluginError('verb:filter', err, {fileName: file.path}));
      return;
    }
    next(null, file);
  });
}

function fixLinks(options) {
  return through.obj(function(file, enc, next) {
    try {
      var url = 'https://github.com/breakdance/breakdance/blob/master/';
      var str = file.contents.toString();
      var re = /(# \[.*?\]\()(?:\.+\/)?(index|lib\/[^\/]+)\.js/gm;
      str = str.replace(re, function(m, $1, $2) {
        return $1 + utils.file(pkg.repository, $2) + '.js';
      });

      file.contents = new Buffer(str);
    } catch (err) {
      this.emit('error', new PluginError('verb:apidocs', err, {fileName: file.path}));
      return;
    }
    next(null, file);
  });
}

function prepend(options) {
  return through.obj(function(file, enc, next) {
    var frontMatter = [
      '---',
      '# this file is automatically generated by the "verb" task in',
      '# assemblefile.js, please do not edit manually.',
      '---',
      '',
      '',
    ].join('\n');

    file.contents = new Buffer(frontMatter + file.contents.toString());
    next(null, file);
  });
}
